#if IS_CUDA || !defined(TH_REAL_IS_HALF)
PyObject * THSPTensor_(size)(PyObject *self, PyObject *args, PyObject *kwargs)
{
  HANDLE_TH_ERRORS
  THSTensor* tensor = ((THSPTensor*)self)->cdata;
  if (PyTuple_Size(args) == 0 && (!kwargs || PyDict_Size(kwargs) == 0)) {
    return THPSize_New(tensor->nDimensionI + tensor->nDimensionV, tensor->size);
  }

  int tuplecount = args ? PyTuple_Size(args) : 0;
  int dictcount = kwargs ? PyDict_Size(kwargs) : 0;

  PyObject* pydim = NULL;
  if (tuplecount == 1 && dictcount == 0) {
    pydim = PyTuple_GET_ITEM(args, 0);
  } else if (dictcount == 1 && tuplecount == 0) {
    pydim = PyDict_GetItemString(kwargs, "dim");
  }

  if (pydim && THPUtils_checkLong(pydim)) {
    int dim = (int)THPUtils_unpackLong(pydim);
    if (dim < 0)
      dim += tensor->nDimensionI + tensor->nDimensionV;
    return PyInt_FromLong(THSTensor_(size)(LIBRARY_STATE tensor, dim));
  }

  THPUtils_invalidArguments(args, kwargs, "size", 2, "(int dim)", "no arguments");
  return NULL;
  END_HANDLE_TH_ERRORS
}
[[
  name: THSPTensor_(size)
  python_name: size
  method_flags: METH_KEYWORDS
  only_register: True
  sparse: yes
]]
#endif

[[
  name: nDimension
  sparse: yes
  python_name: ndimension
  return: long
  arguments:
  - THSTensor* self
]]
[[
  name: THPTensor_(nDimension)
  python_name: dim
  only_register: True
  method_flags: METH_KEYWORDS
  sparse: yes
]]

[[
  name: nnz
  sparse: yes
  return: long
  arguments:
  - THSTensor* self
]]

[[
  name: isContiguous
  sparse: yes
  python_name: is_contiguous
  return: bool
  arguments:
  - THSTensor* self
]]

[[
  name: indices
  defined_if: "!IS_CUDA"
  sparse: yes
  return: THLongTensor*
  arguments:
  - THSTensor* self
]]

[[
  name: indices
  defined_if: "IS_CUDA"
  sparse: yes
  return: THCudaLongTensor*
  arguments:
  - THSTensor* self
]]


[[
  name: values
  sparse: yes
  return: THTensor*
  arguments:
  - THSTensor* self
]]

[[
  name: contiguous
  sparse: yes
  return: argument 0
  arguments:
  - THSTensor* self
]]

[[
  name: clone
  sparse: yes
  cname: newClone
  return: THSTensor*
  arguments:
    - THSTensor* self
]]

[[
  name: toDense
  sparse: yes
  python_name: to_dense
  return: THTensor*
  arguments:
  - THSTensor* self
]]

[[
  name: resizeAs_
  python_name: resize_as_
  sparse: yes
  cname: resizeAs
  return: self
  arguments:
    - THSTensor* self
    - THSTensor* template
]]

[[
  name: transpose
  sparse: yes
  cname: newTranspose
  return: THSTensor*
  arguments:
  - THSTensor* self
  - long dim0
  - long dim1
]]

[[
  name: transpose_
  sparse: yes
  cname: transpose
  return: argument 0
  arguments:
  - THSTensor* self
  - long dim0
  - long dim1
]]

[[
  name: mm
  sparse: yes
  only_stateless: True
  cname: spaddmm
  return: argument 0
  before_call: |
    long s1 = THSTensor_(size)(LIBRARY_STATE ((THSPTensor*)$arg4)->cdata, 0);
    long s2 = THTensor_(size)(LIBRARY_STATE ((THPTensor*)$arg5)->cdata, 1);
    THTensor_(resize2d)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, s1, s2);
  arguments:
    - arg: THTensor* result
      output: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THSTensor* mat1
    - THTensor* mat2
]]

[[
  name: spmm
  only_stateless: True
  sparse: yes
  cname: spaddmm
  return: argument 0
  before_call: |
    long s1 = THSTensor_(size)(LIBRARY_STATE ((THSPTensor*)$arg4)->cdata, 0);
    long s2 = THTensor_(size)(LIBRARY_STATE ((THPTensor*)$arg5)->cdata, 1);
    THTensor_(resize2d)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, s1, s2);
    THTensor_(zero)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata);
  arguments:
    - arg: THTensor* result
      output: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THSTensor* mat1
    - THTensor* mat2
]]

[[
  name: sspmm
  only_stateless: True
  sparse: yes
  cname: sspaddmm
  return: argument 0
  before_call: |
    long s1 = THSTensor_(size)(LIBRARY_STATE ((THSPTensor*)$arg4)->cdata, 0);
    long s2 = THTensor_(size)(LIBRARY_STATE ((THPTensor*)$arg5)->cdata, 1);
    THSTensor_(resize2d)(LIBRARY_STATE ((THSPTensor*)$arg0)->cdata, s1, s2);
  arguments:
    - arg: THSTensor* result
      output: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THSTensor* mat1
    - THTensor* mat2
]]

[[
  name: sspaddmm
  sparse: yes
  with_stateless: True
  return: argument 0
  arguments:
    - arg: THSTensor* result
      output: True
    - arg: real beta
      default: AS_REAL(1)
    - THSTensor* self
    - arg: real alpha
      default: AS_REAL(1)
    - THSTensor* mat1
    - THTensor* mat2
]]

[[
  name: spadd
  sparse: yes
  cname: spcadd
  with_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* mat1
    - arg: real value
      default: AS_REAL(1)
    - THSTensor* mat2
]]

[[
  name: zero_
  sparse: yes
  cname: zero
  return: self
  arguments:
    - THSTensor* self
]]

[[
  name: add
  sparse: yes
  with_stateless: True
  return: argument 0
  cname: cadd
  arguments:
    - arg: THSTensor* result
      output: True
    - THSTensor* self
    - arg: real value
      default: AS_REAL(1)
    - THSTensor* other
]]

[[
  name: add_
  sparse: yes
  return: argument 0
  cname: cadd
  arguments:
    - THSTensor* self
    - THSTensor* self
    - arg: real value
      default: AS_REAL(1)
    - THSTensor* other
]]

[[
  name: sub
  sparse: yes
  with_stateless: True
  return: argument 0
  cname: csub
  arguments:
    - arg: THSTensor* result
      output: True
    - THSTensor* self
    - arg: real value
      default: AS_REAL(1)
    - THSTensor* other
]]

[[
  name: sub_
  sparse: yes
  return: argument 0
  cname: csub
  arguments:
    - THSTensor* self
    - THSTensor* self
    - arg: real value
      default: AS_REAL(1)
    - THSTensor* other
]]

[[
  name: mul
  sparse: yes
  return: argument 0
  with_stateless: True
  options:
    - cname: mul
      arguments:
        - arg: THSTensor* result
          output: True
        - THSTensor* self
        - real value
    - cname: cmul
      arguments:
        - arg: THSTensor* result
          output: True
        - THSTensor* self
        - THSTensor* other
]]

[[
  name: mul_
  sparse: yes
  return: argument 0
  options:
    - cname: mul
      arguments:
        - THSTensor* self
        - THSTensor* self
        - real value
    - cname: cmul
      arguments:
        - THSTensor* self
        - THSTensor* self
        - THSTensor* other
]]

[[
  name: div
  sparse: yes
  cname: div
  with_stateless: True
  return: argument 0
  arguments:
    - arg: THSTensor* result
      output: True
    - THSTensor* self
    - real value
]]

[[
  name: div_
  sparse: yes
  cname: div
  return: argument 0
  arguments:
    - THSTensor* self
    - THSTensor* self
    - real value
]]

[[
  name: sparse_mask
  cname: sparseMask
  return: argument 0
  arguments:
    - arg: THSTensor* result
      output: True
    - THTensor* self
    - THSTensor* mask
]]
