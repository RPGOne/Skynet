[[
  name: randperm
  defined_if: "!IS_CUDA"
  only_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - long n
]]

#if !defined(TH_REAL_IS_HALF) && !IS_CUDA
static void THTensor_(random2__)(THTensor *self, THGenerator *gen, long a, long b)
{
  THArgCheck(b > a, 2, "upper bound must be greater than lower bound");
  TH_TENSOR_APPLY(real, self, *self_data = ((THRandom_random(gen) % (b-a)) + a);)
}

static void THTensor_(random1__)(THTensor *self, THGenerator *gen, long b)
{
  THArgCheck(b > 0, 1, "upper bound must be positive");
  TH_TENSOR_APPLY(real, self, *self_data = (THRandom_random(gen) % b);)
}
#endif

[[
  name: random_
  defined_if: "!IS_CUDA"
  return: self
  options:
    - cname: random
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
    - cname: random1__
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - long to
    - cname: random2__
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - long from
        - long to
]]

[[
  name: multinomial
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  with_stateless: True
  return: argument 0
  arguments:
    - arg: THLongTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - THTensor* self
    - long num_samples
    - arg: bool replacement
      default: "false"
]]

[[
  name: uniform_
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  cname: uniform
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: real from
      default: 0
    - arg: real to
      default: 1
]]

#if defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
static void THTensor_(normal_means)(THTensor *self, THGenerator *gen, THTensor *means, real stddev)
{
  THTensor_(resizeAs)(self, means);
  THTensor_(normal)(self, gen, 0, stddev);
  THTensor_(cadd)(self, self, 1, means);
}

static void THTensor_(normal_stddevs)(THTensor *self, THGenerator *gen, real mean, THTensor *stddevs)
{
  THTensor_(resizeAs)(self, stddevs);
  THTensor_(normal)(self, gen, 0, 1);
  THTensor_(cmul)(self, self, stddevs);
  THTensor_(add)(self, self, mean);
}

static void THTensor_(normal_means_stddevs)(THTensor *self, THGenerator *gen, THTensor *means, THTensor *stddevs)
{
  THTensor_(resizeAs)(self, means);
  THTensor_(normal)(self, gen, 0, 1);
  THTensor_(cmul)(self, self, stddevs);
  THTensor_(cadd)(self, self, 1, means);
}
#endif

[[
  name: normal
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  return: argument 0
  only_stateless: True
  options:
    - cname: normal_means
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THTensor* means
        - arg: real std
          default: 1
    - cname: normal_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - arg: real mean
          default: 0
        - THTensor* std
    - cname: normal_means_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THTensor* means
        - THTensor* std
]]

[[
  name: normal_
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  cname: normal
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: real mean
      default: 0
    - arg: real std
      default: 1
]]

[[
  name: cauchy_
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  cname: cauchy
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: real median
      default: 0
    - arg: real sigma
      default: 1
]]

[[
  name: logNormal_
  cname: logNormal
  python_name: log_normal_
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: real mean
      default: 1
    - arg: real std
      default: 2
]]

[[
  name: exponential_
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  cname: exponential
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: real lambd
      default: 1
]]

[[
  name: rand
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  only_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: randn
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  only_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: multinomial
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  with_stateless: True
  return: argument 0
  arguments:
    - arg: THIndexTensor* result
      output: True
    - THTensor* self
    - long num_samples
    - arg: bool replacement
      default: "false"
]]

[[
  name: uniform_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  cname: uniform
  return: self
  arguments:
    - THTensor* self
    - arg: double from
      default: 0
    - arg: double to
      default: 1
]]

#if CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
static void THTensor_(normal_means)(THCState *_, THTensor *self, THTensor *means, double stddev)
{
  THTensor_(resizeAs)(LIBRARY_STATE self, means);
  THTensor_(normal)(LIBRARY_STATE self, 0, stddev);
  THTensor_(cadd)(LIBRARY_STATE self, self, AS_REAL(1), means);
}

static void THTensor_(normal_stddevs)(THCState *_, THTensor *self, double mean, THTensor *stddevs)
{
  THTensor_(resizeAs)(LIBRARY_STATE self, stddevs);
  THTensor_(normal)(LIBRARY_STATE self, 0, 1);
  THTensor_(cmul)(LIBRARY_STATE self, self, stddevs);
  THTensor_(add)(LIBRARY_STATE self, self, AS_REAL(mean));
}

static void THTensor_(normal_means_stddevs)(THCState *_, THTensor *self, THTensor *means, THTensor *stddevs)
{
  THTensor_(resizeAs)(LIBRARY_STATE self, means);
  THTensor_(normal)(LIBRARY_STATE self, 0, 1);
  THTensor_(cmul)(LIBRARY_STATE self, self, stddevs);
  THTensor_(cadd)(LIBRARY_STATE self, self, AS_REAL(1), means);
}
#endif

[[
  name: normal
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  return: argument 0
  only_stateless: True
  options:
    - cname: normal
      arguments:
        - arg: THTensor* output
          output: True
        - arg: double mean
          default: 0
        - arg: double std
          default: 1
    - cname: normal_means
      arguments:
        - arg: THTensor* output
          output: True
        - THTensor* means
        - arg: double std
          default: 1
    - cname: normal_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: double mean
          default: 0
        - THTensor* std
    - cname: normal_means_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - THTensor* means
        - THTensor* std
]]

[[
  name: normal_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  cname: normal
  return: self
  arguments:
    - THTensor* self
    - arg: double mean
      default: 0
    - arg: double std
      default: 1
]]

[[
  name: cauchy_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  cname: cauchy
  return: self
  arguments:
    - THTensor* self
    - arg: double median
      default: 0
    - arg: double sigma
      default: 1
]]

[[
  name: logNormal_
  cname: logNormal
  python_name: log_normal_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  return: self
  arguments:
    - THTensor* self
    - arg: double mean
      default: 1
    - arg: double std
      default: 2
]]

[[
  name: exponential_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  cname: exponential
  return: self
  arguments:
    - THTensor* self
    - arg: double lambd
      default: 1
]]

[[
  name: rand
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  only_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: randn
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  only_stateless: True
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THSize* size
      long_args: True
]]

[[
  name: geometric_
  defined_if: "!IS_CUDA"
  cname: geometric
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - double p
]]

#define THDoubleTensor_BERNOULLI_TENSOR THDoubleTensor_bernoulli_DoubleTensor
#define THFloatTensor_BERNOULLI_TENSOR THFloatTensor_bernoulli_FloatTensor

[[
  name: bernoulli
  defined_if: defined(TH_REAL_IS_FLOAT) || defined(TH_REAL_IS_DOUBLE)
  return: argument 0
  with_stateless: True
  before_call:
    THTensor_(resizeAs)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, ((THPTensor*)$arg2)->cdata);
  cname: BERNOULLI_TENSOR
  arguments:
    - arg: THTensor* output
      output: True
    - arg: THGenerator* generator
      default: THPDefaultGenerator->cdata
      kwarg_only: True
    - THTensor* self
]]

#undef THDoubleTensor_BERNOULLI_TENSOR
#undef THFloatTensor_BERNOULLI_TENSOR

[[
  name: bernoulli_
  defined_if: "!IS_CUDA"
  return: self
  options:
    - cname: bernoulli
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - arg: double p
          default: 0.5
    - cname: bernoulli_FloatTensor
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THFloatTensor* float_p
    - cname: bernoulli_DoubleTensor
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: THPDefaultGenerator->cdata
          kwarg_only: True
        - THDoubleTensor* float_p
]]

[[
  name: geometric_
  cname: geometric
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  return: self
  arguments:
    - THTensor* self
    - double p
]]

#define THCudaDoubleTensor_BERNOULLI_TENSOR THCudaDoubleTensor_bernoulli_DoubleTensor
#define THCudaTensor_BERNOULLI_TENSOR THCudaTensor_bernoulli_FloatTensor

[[
  name: bernoulli
  defined_if: CUDA_FLOAT || CUDA_DOUBLE
  return: argument 0
  with_stateless: True
  cname: BERNOULLI_TENSOR
  before_call:
    THTensor_(resizeAs)(LIBRARY_STATE ((THPTensor*)$arg0)->cdata, ((THPTensor*)$arg1)->cdata);
  arguments:
    - arg: THTensor* output
      output: True
    - THTensor* self
]]

#undef THCudaDoubleTensor_BERNOULLI_TENSOR
#undef THCudaTensor_BERNOULLI_TENSOR

[[
  name: bernoulli_
  defined_if: CUDA_FLOAT || CUDA_DOUBLE || CUDA_HALF
  return: self
  options:
    - cname: bernoulli
      arguments:
        - THTensor* self
        - arg: double p
          default: 0.5
    - cname: bernoulli_FloatTensor
      arguments:
        - THTensor* self
        - THCudaTensor* float_p
    - cname: bernoulli_DoubleTensor
      arguments:
        - THTensor* self
        - THCudaDoubleTensor* float_p
]]
